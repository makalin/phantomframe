version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: phantomframe_postgres
    environment:
      POSTGRES_DB: phantomframe
      POSTGRES_USER: phantomframe_user
      POSTGRES_PASSWORD: phantomframe_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - phantomframe_network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: phantomframe_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - phantomframe_network
    restart: unless-stopped

  # Node.js backend
  backend:
    build: ./backend
    container_name: phantomframe_backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://phantomframe_user:phantomframe_password@postgres:5432/phantomframe
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your_jwt_secret_here_change_in_production
      UPLOAD_DIR: /app/uploads
      PROCESSED_DIR: /app/processed
      LOG_DIR: /app/logs
      CORS_ORIGIN: http://localhost:3000
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/processed:/app/processed
      - ./backend/logs:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - phantomframe_network
    restart: unless-stopped

  # Python ML service
  ml_service:
    build: ./ml_service
    container_name: phantomframe_ml
    environment:
      PYTHONPATH: /app
      MODEL_DIR: /app/models
      DATABASE_URL: postgresql://phantomframe_user:phantomframe_password@postgres:5432/phantomframe
      REDIS_URL: redis://redis:6379
    volumes:
      - ./ml_service/models:/app/models
      - ./ml_service/data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - phantomframe_network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: phantomframe_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - frontend
    networks:
      - phantomframe_network
    restart: unless-stopped

  # Frontend build service
  frontend:
    build: ./frontend
    container_name: phantomframe_frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_VERSION: 1.0.0
    volumes:
      - ./frontend/build:/app/build
    networks:
      - phantomframe_network
    restart: unless-stopped

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    container_name: phantomframe_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - phantomframe_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: phantomframe_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - phantomframe_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  phantomframe_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
